diff --git a/run_rl_swarm.sh b/run_rl_swarm.sh
index 81989e8..cc5394a 100755
--- a/run_rl_swarm.sh
+++ b/run_rl_swarm.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 
-# General arguments
+#General args
 ROOT=$PWD
 
 export PUB_MULTI_ADDRS
@@ -11,15 +11,15 @@ export CONNECT_TO_TESTNET
 export ORG_ID
 export HF_HUB_DOWNLOAD_TIMEOUT=120  # 2 minutes
 
-# Check if public multi-address is given else set to default
+#Check if public multi-address is given else set to default
 DEFAULT_PUB_MULTI_ADDRS=""
 PUB_MULTI_ADDRS=${PUB_MULTI_ADDRS:-$DEFAULT_PUB_MULTI_ADDRS}
 
-# Check if peer multi-address is given else set to default
+#Check if peer multi-address is given else set to default
 DEFAULT_PEER_MULTI_ADDRS="/ip4/38.101.215.13/tcp/30002/p2p/QmQ2gEXoPJg6iMBSUFWGzAabS2VhnzuS782Y637hGjfsRJ" # gensyn coordinator node
 PEER_MULTI_ADDRS=${PEER_MULTI_ADDRS:-$DEFAULT_PEER_MULTI_ADDRS}
 
-# Check if host multi-address is given else set to default
+#Check if host multi-address is given else set to default
 DEFAULT_HOST_MULTI_ADDRS="/ip4/0.0.0.0/tcp/38331"
 HOST_MULTI_ADDRS=${HOST_MULTI_ADDRS:-$DEFAULT_HOST_MULTI_ADDRS}
 
@@ -28,66 +28,37 @@ HOST_MULTI_ADDRS=${HOST_MULTI_ADDRS:-$DEFAULT_HOST_MULTI_ADDRS}
 DEFAULT_IDENTITY_PATH="$ROOT"/swarm.pem
 IDENTITY_PATH=${IDENTITY_PATH:-$DEFAULT_IDENTITY_PATH}
 
-GREEN_TEXT="\033[32m"
-RESET_TEXT="\033[0m"
-
-echo_green() {
-    echo -e "$GREEN_TEXT$1$RESET_TEXT"
-}
-
-while true; do
-    echo -en $GREEN_TEXT
-    read -p ">> Would you like to connect to the Testnet? [Y/n] " yn
-    echo -en $RESET_TEXT
-    yn=${yn:-Y}  # Default to "Y" if the user presses Enter
-    case $yn in
-        [Yy]*)  CONNECT_TO_TESTNET=True && break ;;
-        [Nn]*)  CONNECT_TO_TESTNET=False && break ;;
-        *)  echo ">>> Please answer yes or no." ;;
-    esac
-done
+CONNECT_TO_TESTNET=True
 
 if [ "$CONNECT_TO_TESTNET" = "True" ]; then
-    # Run modal_login server.
+    # run modal_login server
     echo "Please login to create an Ethereum Server Wallet"
     cd modal-login
     # Check if the yarn command exists; if not, install Yarn.
     source ~/.bashrc
-    if ! command -v yarn > /dev/null 2>&1; then
-        # Detect Ubuntu (including WSL Ubuntu) and install Yarn accordingly
-        if grep -qi "ubuntu" /etc/os-release 2>/dev/null || uname -r | grep -qi "microsoft"; then
-            echo "Detected Ubuntu or WSL Ubuntu. Installing Yarn via apt..."
-            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
-            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
-            sudo apt update && sudo apt install -y yarn
-        else
-            echo "Yarn is not installed. Installing Yarn..."
-            curl -o- -L https://yarnpkg.com/install.sh | sh
-            echo 'export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> ~/.bashrc
-            source ~/.bashrc
-        fi
-    fi
+    
     yarn install
-    yarn dev > /dev/null 2>&1 & # Run in background and suppress output
+    yarn dev -p $1> /dev/null 2>&1 & # Run in background and suppress output
 
     SERVER_PID=$!  # Store the process ID
     sleep 5
     open http://localhost:3000
     cd ..
 
-    echo_green ">> Waiting for modal userData.json to be created..."
+    # Wait until modal-login/temp-data/userData.json exists
     while [ ! -f "modal-login/temp-data/userData.json" ]; do
+        echo "Waiting for userData.json to be created..."
         sleep 5  # Wait for 5 seconds before checking again
     done
-    echo "Found userData.json. Proceeding..."
+    echo "userData.json found. Proceeding..."
 
     ORG_ID=$(awk 'BEGIN { FS = "\"" } !/^[ \t]*[{}]/ { print $(NF - 1); exit }' modal-login/temp-data/userData.json)
-    echo "Your ORG_ID is set to: $ORG_ID"
+    echo "ORG_ID set to: $ORG_ID"
 
     # Wait until the API key is activated by the client
     echo "Waiting for API key to become activated..."
     while true; do
-        STATUS=$(curl -s "http://localhost:3000/api/get-api-key-status?orgId=$ORG_ID")
+        STATUS=$(curl -s "http://localhost:$1/api/get-api-key-status?orgId=$ORG_ID")
         if [[ "$STATUS" == "activated" ]]; then
             echo "API key is activated! Proceeding..."
             break
@@ -99,7 +70,7 @@ if [ "$CONNECT_TO_TESTNET" = "True" ]; then
 
     # Function to clean up the server process
     cleanup() {
-        echo_green ">> Shutting down server..."
+        echo "Shutting down server..."
         kill $SERVER_PID
         rm -r modal-login/temp-data/*.json
         exit 0
@@ -108,44 +79,37 @@ if [ "$CONNECT_TO_TESTNET" = "True" ]; then
     # Set up trap to catch Ctrl+C and call cleanup
     trap cleanup INT
 fi
-
-pip_install() {
-    pip install --disable-pip-version-check -q -r "$1"
-}
-
-echo_green ">> Getting requirements..."
-pip_install "$ROOT"/requirements-hivemind.txt
-pip_install "$ROOT"/requirements.txt
-
-if ! command -v nvidia-smi &> /dev/null; then
-    # You don't have a NVIDIA GPU
-    CONFIG_PATH="$ROOT/hivemind_exp/configs/mac/grpo-qwen-2.5-0.5b-deepseek-r1.yaml"
+#lets go!
+echo "Getting requirements..."
+pip install -r "$ROOT"/requirements-hivemind.txt > /dev/null
+pip install -r "$ROOT"/requirements.txt > /dev/null
+
+if ! which nvidia-smi; then
+   #You don't have a NVIDIA GPU
+   CONFIG_PATH="$ROOT/hivemind_exp/configs/mac/grpo-qwen-2.5-0.5b-deepseek-r1.yaml"
 elif [ -n "$CPU_ONLY" ]; then
-    # ... or we don't want to use it
-    CONFIG_PATH="$ROOT/hivemind_exp/configs/mac/grpo-qwen-2.5-0.5b-deepseek-r1.yaml"
+   # ... or we don't want to use it
+   CONFIG_PATH="$ROOT/hivemind_exp/configs/mac/grpo-qwen-2.5-0.5b-deepseek-r1.yaml"
 else
-    # NVIDIA GPU found
-    pip_install "$ROOT"/requirements_gpu.txt
-    CONFIG_PATH="$ROOT/hivemind_exp/configs/gpu/grpo-qwen-2.5-0.5b-deepseek-r1.yaml"
+   #NVIDIA GPU found
+   pip install -r "$ROOT"/requirements_gpu.txt > /dev/null
+   CONFIG_PATH="$ROOT/hivemind_exp/configs/gpu/grpo-qwen-2.5-0.5b-deepseek-r1.yaml"
 fi
 
-echo_green ">> Done!"
+echo ">> Done!"
+echo ""
+echo ""
 
-if [ -n "${HF_TOKEN}" ]; then # Check if HF_TOKEN is already set and use if so. Else give user a prompt to choose.
-    HUGGINGFACE_ACCESS_TOKEN=${HF_TOKEN}
+huggingFaceApiKey=$1
+if [ -n "$huggingFaceApiKey" ]; then
+    HUGGINGFACE_ACCESS_TOKEN="$huggingFaceApiKey"
 else
-    echo -en $GREEN_TEXT
-    read -p ">> Would you like to push models you train in the RL swarm to the Hugging Face Hub? [y/N] " yn
-    echo -en $RESET_TEXT
-    yn=${yn:-N} # Default to "N" if the user presses Enter
-    case $yn in
-        [Yy]*) read -p "Enter your Hugging Face access token: " HUGGINGFACE_ACCESS_TOKEN ;;
-        [Nn]*) HUGGINGFACE_ACCESS_TOKEN="None" ;;
-        *) echo ">>> No answer was given, so NO models will be pushed to Hugging Face Hub" && HUGGINGFACE_ACCESS_TOKEN="None" ;;
-    esac
+    HUGGINGFACE_ACCESS_TOKEN="None"
 fi
 
-echo_green ">> Good luck in the swarm!"
+echo ""
+echo ""
+echo "Good luck in the swarm!"
 
 if [ -n "$ORG_ID" ]; then
     python -m hivemind_exp.gsm8k.train_single_gpu \
@@ -158,9 +122,9 @@ else
         --hf_token "$HUGGINGFACE_ACCESS_TOKEN" \
         --identity_path "$IDENTITY_PATH" \
         --public_maddr "$PUB_MULTI_ADDRS" \
-        --initial_peers "$PEER_MULTI_ADDRS" \
+        --initial_peers "$PEER_MULTI_ADDRS"\
         --host_maddr "$HOST_MULTI_ADDRS" \
         --config "$CONFIG_PATH"
 fi
 
-wait  # Keep script running until Ctrl+C
+wait  # Keep script running until Ctrl+C
\ No newline at end of file
